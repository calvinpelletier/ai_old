#!/usr/bin/env python3
import torch
import torch.nn.functional as F
import ai_old.constants as c
from tqdm import tqdm
from PIL import Image
from ai_old.dataset.dataset import _get_transform
import os
import ai_old.models.etc.deeplab as deeplab
import torchvision.transforms as transforms
import sys


def run(path):
    model = getattr(deeplab, 'resnet101')(
        pretrained=True,
        num_classes=19,
        num_groups=32,
        weight_std=True,
        beta=False,
    )
    ckpt = torch.load(os.path.join(
        c.PRETRAINED_MODELS, 'deeplab/deeplab_model.pth'))
    state_dict = {
        k[7:]: v for k, v in ckpt['state_dict'].items() if 'tracked' not in k
    }
    model.load_state_dict(state_dict)
    model.to('cuda')
    model.eval()

    segnorm = transforms.Normalize(
        [0.485, 0.456, 0.406], [0.229, 0.224, 0.225])

    im_path = os.path.join(path, 'ims/{}_{}.png')
    metrics_path = os.path.join(path, 'metrics.csv')
    lines = []
    with torch.no_grad():
        with open(metrics_path, 'r') as f:
            for line in tqdm(f.readlines()):
            # for line in f.readlines():
                parts = line.strip().split(',')
                x0, s0 = _seg(model, segnorm, im_path.format(parts[0], 'f'))
                x1, s1 = _seg(model, segnorm, im_path.format(parts[0], 'm'))
                mouth = _get_diff(s0, s1, 10)
                glasses = _get_diff(s0, s1, 3)
                # print(f'{parts[0]}: {mouth:.3f}, {glasses:.3f}')

                # TODO:
                # skin_color = _get_color_diff_in_overlap(x0, x1, s0, s1, 1)

                parts.append(f'{mouth:.4f}')
                parts.append(f'{glasses:.4f}')
                lines.append(','.join(parts))

    with open(metrics_path, 'w') as f:
        f.write('\n'.join(lines))
        f.write('\n')


def _seg(model, segnorm, im_path):
    img = Image.open(im_path).convert('RGB')
    x = _get_transform(False, True)(img).cuda().unsqueeze(dim=0)
    y = F.interpolate(
        x, size=(513, 513), mode='bilinear', align_corners=False)
    s = model(torch.unsqueeze(segnorm(y.squeeze()), dim=0))
    s = F.interpolate(
        s, size=(128, 128), mode='bilinear', align_corners=False)
    s = F.softmax(s, dim=1)
    x = F.interpolate(
        x, size=(128, 128), mode='bilinear', align_corners=False)
    return x, s


def _get_diff(s0, s1, idx):
    x0 = s0[:, idx, :, :].squeeze(dim=1).squeeze(dim=0)
    x1 = s1[:, idx, :, :].squeeze(dim=1).squeeze(dim=0)
    # overlap = torch.sum(x0 * x1).cpu().item()
    diff = torch.abs(torch.sum(x0) - torch.sum(x1)).cpu().item()
    return diff


if __name__ == '__main__':
    run(sys.argv[1])
